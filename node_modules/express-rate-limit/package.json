{
  "_args": [
    [
      {
        "raw": "express-rate-limit",
        "scope": null,
        "escapedName": "express-rate-limit",
        "name": "express-rate-limit",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\Ardeshir\\IdeaProjects\\englishAcademi"
    ]
  ],
  "_from": "express-rate-limit",
  "_hasShrinkwrap": false,
  "_id": "express-rate-limit@3.5.0",
  "_location": "/express-rate-limit",
  "_nodeVersion": "12.1.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/express-rate-limit_3.5.0_1556550368121_0.9220219460753385"
  },
  "_npmUser": {
    "name": "nfriedly",
    "email": "nathan@nfriedly.com"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "express-rate-limit",
    "scope": null,
    "escapedName": "express-rate-limit",
    "name": "express-rate-limit",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/express-rate-limit/-/express-rate-limit-3.5.0.tgz",
  "_shasum": "6aa3f62f5adc4dbea9162e8101208d7aa5745789",
  "_shrinkwrap": null,
  "_spec": "express-rate-limit",
  "_where": "C:\\Users\\Ardeshir\\IdeaProjects\\englishAcademi",
  "author": {
    "name": "Nathan Friedly",
    "url": "http://nfriedly.com/"
  },
  "bugs": {
    "url": "https://github.com/nfriedly/express-rate-limit/issues"
  },
  "dependencies": {
    "defaults": "^1.0.3"
  },
  "description": "Basic IP rate-limiting middleware for Express. Use to limit repeated requests to public APIs and/or endpoints such as password reset.",
  "devDependencies": {
    "eslint": "^5.15.3",
    "eslint-config-prettier": "^2.9.0",
    "eslint-plugin-prettier": "^2.6.2",
    "express": "^4.16.3",
    "husky": "^2.1.0",
    "mocha": "^6.1.4",
    "prettier": "^1.17.0",
    "pretty-quick": "^1.6.0",
    "supertest": "^3.1.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-DLUgv9lqUCEil5RV5naS/rABzfi/zOEfgU7Fb/0f+QyRbM5pHCvZozhWEeD01b0V5RsyGBNtRhp2YxfvrlgAaA==",
    "shasum": "6aa3f62f5adc4dbea9162e8101208d7aa5745789",
    "tarball": "https://registry.npmjs.org/express-rate-limit/-/express-rate-limit-3.5.0.tgz",
    "fileCount": 4,
    "unpackedSize": 16272,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcxxLhCRA9TVsSAnZWagAAzcgQAKCbPKrsRHruArASOxea\ndQzq8uHA3b5EywvC5bKGb93KGPuOwTYlQ0dIaNuj3RHd//iZ1vqIVM8kguJJ\nVPsF4FHuyISDBn3rHrKmiw6wiFEuhU933gzAoatTXDcj/EGRjD37IbEVuQ2b\nxtM5wZhTiuAz7UX7RmQyXP0RyEvgsIQTA+Sly0K0FQD3B76vbMl/JCwHTXY8\nExVLPAYaN3bbWDGkRHPJK3U4i8hQ1SQWCnIkHVn8Xu4lEePVN7EZthj/01G8\nKWTOpwmB7mQLzIDwDjyzFMXT5YIVW9xE7n67azsW6/lg3TTPGD3bFNENgbMn\n4eGhRvRbwSz8a1tTCW4Pe1MM500+Iozk9971h8Ft/S94u+FvdVIhjEDodI/p\nNqQOrFiwyTyGsCth3067qFQeOz4oEZ7U1sdb0QjVAYZtV8JikZMqqd5BLgp7\nB7WfyrhZpaDjw2UvpY33YH9ZoF449UNx048RbhoTV5kFHAlmukJuHzbuvgND\n0GotQwOXmIKn4sRFE3nOCM+5pHE9mutgcr9cPuf6kVPUqllFKjASmt3laQhR\n3u97KTWW2GQ/kn+iN3RXqzvsF3ZllNHm4pbd+7sjvP3LA8WIkIbH3IZeV8KM\nPvtCC4XxCzeCEdRIJ7WX2QPfrbiivJcHffYNA2Uoz7b+SdTpITBt7S7AiTwm\nD805\r\n=Rd+z\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "lib/"
  ],
  "gitHead": "3184b765eb35dd2f1970ad20943a30dc17754627",
  "homepage": "https://github.com/nfriedly/express-rate-limit",
  "keywords": [
    "express-rate-limit",
    "express",
    "rate",
    "limit",
    "ratelimit",
    "rate-limit",
    "middleware",
    "ip",
    "auth",
    "authorization",
    "security",
    "brute",
    "force",
    "bruteforce",
    "brute-force",
    "attack"
  ],
  "license": "MIT",
  "main": "lib/express-rate-limit.js",
  "maintainers": [
    {
      "name": "nfriedly",
      "email": "nathan@nfriedly.com"
    }
  ],
  "name": "express-rate-limit",
  "optionalDependencies": {},
  "readme": "# Express Rate Limit\n\n[![Build Status](https://secure.travis-ci.org/nfriedly/express-rate-limit.png?branch=master)](http://travis-ci.org/nfriedly/express-rate-limit)\n[![NPM version](http://badge.fury.io/js/express-rate-limit.png)](https://npmjs.org/package/express-rate-limit \"View this project on NPM\")\n[![Dependency Status](https://david-dm.org/nfriedly/express-rate-limit.png?theme=shields.io)](https://david-dm.org/nfriedly/express-rate-limit)\n[![Development Dependency Status](https://david-dm.org/nfriedly/express-rate-limit/dev-status.png?theme=shields.io)](https://david-dm.org/nfriedly/express-rate-limit#info=devDependencies)\n\nBasic rate-limiting middleware for Express. Use to limit repeated requests to public APIs and/or endpoints such as password reset.\n\nPlays nice with [express-slow-down](https://www.npmjs.com/package/express-slow-down).\n\nNote: this module does not share state with other processes/servers by default.\nIf you need a more robust solution, I recommend using an external store:\n\n### Stores\n\n- Memory Store _(default, built-in)_ - stores hits in-memory in the Node.js process. Does not share state with other servers or processes.\n- [Redis Store](https://npmjs.com/package/rate-limit-redis)\n- [Memcached Store](https://npmjs.org/package/rate-limit-memcached)\n- [Mongo Store](https://www.npmjs.com/package/rate-limit-mongo)\n\n### Alternate Rate-limiters\n\nThis module was designed to only handle the basics and didn't even support external stores initially. These other options all are excellent pieces of software and may be more appropriate for some situations:\n\n- [rate-limiter-flexible](https://www.npmjs.com/package/rate-limiter-flexible)\n- [express-brute](https://www.npmjs.com/package/express-brute)\n- [rate-limiter](https://www.npmjs.com/package/express-limiter)\n\n## Install\n\n```sh\n$ npm install --save express-rate-limit\n```\n\n## Usage\n\nFor an API-only server where the rate-limiter should be applied to all requests:\n\n```js\nconst rateLimit = require(\"express-rate-limit\");\n\napp.enable(\"trust proxy\"); // only if you're behind a reverse proxy (Heroku, Bluemix, AWS ELB, Nginx, etc)\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100 // limit each IP to 100 requests per windowMs\n});\n\n//  apply to all requests\napp.use(limiter);\n```\n\nFor a \"regular\" web server (e.g. anything that uses `express.static()`), where the rate-limiter should only apply to certain requests:\n\n```js\nconst rateLimit = require(\"express-rate-limit\");\n\napp.enable(\"trust proxy\"); // only if you're behind a reverse proxy (Heroku, Bluemix, AWS ELB, Nginx, etc)\n\nconst apiLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100\n});\n\n// only apply to requests that begin with /api/\napp.use(\"/api/\", apiLimiter);\n```\n\nCreate multiple instances to apply different rules to different routes:\n\n```js\nconst rateLimit = require(\"express-rate-limit\");\n\napp.enable(\"trust proxy\"); // only if you're behind a reverse proxy (Heroku, Bluemix, AWS ELB, Nginx, etc)\n\nconst apiLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100\n});\napp.use(\"/api/\", apiLimiter);\n\nconst createAccountLimiter = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour window\n  max: 5, // start blocking after 5 requests\n  message:\n    \"Too many accounts created from this IP, please try again after an hour\"\n});\napp.post(\"/create-account\", createAccountLimiter, function(req, res) {\n  //...\n});\n```\n\n**Note:** most stores will require additional configuration, such as custom prefixes, when using multiple instances. The default built-in memory store is an exception to this rule.\n\n## Request API\n\nA `req.rateLimit` property is added to all requests with the `limit`, `current`, and `remaining` number of requests and, if the store provides it, a `resetTime` Date object. These may be used in your application code to take additional actions or inform the user of their status.\n\n## Configuration options\n\n### max\n\nMax number of connections during `windowMs` milliseconds before sending a 429 response.\n\nMay be a number, or a function that returns a number or a promise.\n\nDefaults to `5`. Set to `0` to disable.\n\n### windowMs\n\nHow long in milliseconds to keep records of requests in memory.\n\nDefaults to `60000` (1 minute).\n\n### message\n\nError message sent to user when `max` is exceeded.\n\nMay be a String, JSON object, or any other value that Express's [res.send](https://expressjs.com/en/4x/api.html#res.send) supports.\n\nDefaults to `'Too many requests, please try again later.'`\n\n### statusCode\n\nHTTP status code returned when `max` is exceeded.\n\nDefaults to `429`.\n\n### headers\n\nEnable headers for request limit (`X-RateLimit-Limit`) and current usage (`X-RateLimit-Remaining`) on all responses and time to wait before retrying (`Retry-After`) when `max` is exceeded.\n\nDefaults to `true`.\n\n### keyGenerator\n\nFunction used to generate keys.\n\nDefaults to req.ip:\n\n```js\nfunction (req /*, res*/) {\n    return req.ip;\n}\n```\n\n### handler\n\nThe function to handle requests once the max limit is exceeded. It receives the request and the response objects. The \"next\" param is available if you need to pass to the next middleware.\n\nThe`req.rateLimit` object has `limit`, `current`, and `remaining` number of requests and, if the store provides it, a `resetTime` Date object.\n\nDefaults to:\n\n```js\nfunction (req, res, /*next*/) {\n    res.status(options.statusCode).send(options.message);\n}\n```\n\n### onLimitReached\n\nFunction that is called the first time a user hits the rate limit within a given window.\n\nThe`req.rateLimit` object has `limit`, `current`, and `remaining` number of requests and, if the store provides it, a `resetTime` Date object.\n\nDefault is an empty function:\n\n```js\nfunction (req, res, options) {\n  /* empty */\n}\n```\n\n### skipFailedRequests\n\nWhen set to `true`, failed requests won't be counted. Request considered failed when:\n\n- response status >= 400\n- requests that were cancelled before last chunk of data was sent (response `close` event triggered)\n- response `error` event was triggrered by response\n\n(Technically they are counted and then un-counted, so a large number of slow requests all at once could still trigger a rate-limit. This may be fixed in a future release.)\n\nDefaults to `false`.\n\n### skipSuccessfulRequests\n\nWhen set to `true` successful requests (response status < 400) won't be counted.\n(Technically they are counted and then un-counted, so a large number of slow requests all at once could still trigger a rate-limit. This may be fixed in a future release.)\n\nDefaults to `false`.\n\n### skip\n\nFunction used to skip requests. Returning `true` from the function will skip limiting for that request.\n\nDefaults to always `false` (count all requests):\n\n```js\nfunction (/*req, res*/) {\n    return false;\n}\n```\n\n### store\n\nThe storage to use when persisting rate limit attempts.\n\nBy default, the [MemoryStore](lib/memory-store.js) is used.\n\nAvailable data stores are:\n\n- MemoryStore: _(default)_ Simple in-memory option. Does not share state when app has multiple processes or servers.\n- [rate-limit-redis](https://npmjs.com/package/rate-limit-redis): A [Redis](http://redis.io/)-backed store, more suitable for large or demanding deployments.\n- [rate-limit-memcached](https://npmjs.org/package/rate-limit-memcached): A [Memcached](https://memcached.org/)-backed store.\n\nYou may also create your own store. It must implement the following in order to function:\n\n```js\nfunction SomeStore() {\n  /**\n   * Increments the value in the underlying store for the given key.\n   * @method function\n   * @param {string} key - The key to use as the unique identifier passed\n   *                     down from RateLimit.\n   * @param {Function} cb - The callback issued when the underlying\n   *                                store is finished.\n   *\n   * The callback should be called with three values:\n   *  - error (usually null)\n   *  - hitCount for this IP\n   *  - resetTime - JS Date object (optional, but necessary for X-RateLimit-Reset header)\n   */\n  this.incr = function(key, cb) {\n    // increment storage\n    cb(null, hits, resetTime);\n  };\n\n  /**\n   * Decrements the value in the underlying store for the given key. Used only when skipFailedRequests is true\n   * @method function\n   * @param {string} key - The key to use as the unique identifier passed\n   *                     down from RateLimit.\n   */\n  this.decrement = function(key) {\n    // decrement storage\n  };\n\n  /**\n   * Resets a value with the given key.\n   * @method function\n   * @param  {[type]} key - The key to reset\n   */\n  this.resetKey = function(key) {\n    // remove key from storage or reset it to 0\n  };\n}\n```\n\n## Instance API\n\n### instance.resetKey(key)\n\nResets the rate limiting for a given key. (Allow users to complete a captcha or whatever to reset their rate limit, then call this method.)\n\n## v3 Changes\n\n- Removed `delayAfter` and `delayMs` options; they were moved to a new module: [express-slow-down](https://npmjs.org/package/express-slow-down).\n- Simplified the default `handler` function so that it no longer changes the response format. Now uses [res.send](https://expressjs.com/en/4x/api.html#res.send).\n- `onLimitReached` now only triggers once for a given ip and window. only `handle` is called for every blocked request.\n\n## v2 Changes\n\nv2 uses a less precise but less resource intensive method of tracking hits from a given IP. v2 also adds the `limiter.resetKey()` API and removes the `global: true` option.\n\n## License\n\nMIT © [Nathan Friedly](http://nfriedly.com/)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nfriedly/express-rate-limit.git"
  },
  "scripts": {
    "precommit": "pretty-quick --staged",
    "test": "eslint . && mocha"
  },
  "version": "3.5.0"
}
