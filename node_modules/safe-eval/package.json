{
  "_args": [
    [
      {
        "raw": "safe-eval@^0.3.0",
        "scope": null,
        "escapedName": "safe-eval",
        "name": "safe-eval",
        "rawSpec": "^0.3.0",
        "spec": ">=0.3.0 <0.4.0",
        "type": "range"
      },
      "C:\\Users\\Ardeshir\\IdeaProjects\\englishAcademi\\node_modules\\google-translate-api"
    ]
  ],
  "_from": "safe-eval@>=0.3.0 <0.4.0",
  "_id": "safe-eval@0.3.0",
  "_inCache": true,
  "_location": "/safe-eval",
  "_nodeVersion": "5.10.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/safe-eval-0.3.0.tgz_1464033307414_0.6982610889244825"
  },
  "_npmUser": {
    "name": "hacksparrow",
    "email": "captain@hacksparrow.com"
  },
  "_npmVersion": "3.8.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "safe-eval@^0.3.0",
    "scope": null,
    "escapedName": "safe-eval",
    "name": "safe-eval",
    "rawSpec": "^0.3.0",
    "spec": ">=0.3.0 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/google-translate-api"
  ],
  "_resolved": "https://registry.npmjs.org/safe-eval/-/safe-eval-0.3.0.tgz",
  "_shasum": "06ce111eebd9c185abaff008ec0fcffc5c5be00c",
  "_shrinkwrap": null,
  "_spec": "safe-eval@^0.3.0",
  "_where": "C:\\Users\\Ardeshir\\IdeaProjects\\englishAcademi\\node_modules\\google-translate-api",
  "author": {
    "name": "Hage Yaapa",
    "email": "captain@hacksparrow.com"
  },
  "bugs": {
    "url": "https://github.com/hacksparrow/safe-eval/issues"
  },
  "dependencies": {},
  "description": "Safer version of eval()",
  "devDependencies": {
    "mocha": "^2.2.5",
    "standard": "^5.1.1"
  },
  "directories": {},
  "dist": {
    "shasum": "06ce111eebd9c185abaff008ec0fcffc5c5be00c",
    "tarball": "https://registry.npmjs.org/safe-eval/-/safe-eval-0.3.0.tgz"
  },
  "gitHead": "ebfcbad1adac1ec2fcc9fa9ee7100a1b412ec97d",
  "homepage": "https://github.com/hacksparrow/safe-eval",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "hacksparrow",
      "email": "captain@hacksparrow.com"
    }
  ],
  "name": "safe-eval",
  "optionalDependencies": {},
  "readme": "# safe-eval [![npm version](https://badge.fury.io/js/safe-eval.svg)](https://badge.fury.io/js/safe-eval)\n\n## What is this?\n\n`safe-eval` lets you execute JavaScript code without having to use the much discouraged and feared upon `eval()`. `safe-eval` has access to all the standard APIs of the [V8 JavaScript Engine](https://code.google.com/p/v8/). By default, it does not have access to the Node.js API, but can be given access using a conext object. It is implemented using [node's vm module](https://nodejs.org/api/vm.html).\n\nCurrently, it works only with Node.js, and the JavaScript code must be an expression (something which evaluates to a value).\n\n## Installation\n\n```sh\nnpm install safe-eval --save\n```\n\n## Usage\n\n```js\nvar safeEval = require('safe-eval')\n```\n\n**safeEval(code, [context], options)**\n\n`code` is the JavaScript code you want to execute.\n\n`context` is an object of methods and properties, these methods and properties are interpreted as global objects in `code`. Be careful about the objects you are passing to the context API, because they can completely defeat the purpose of `safe-eval`.\n\n`options` is the [options object](https://nodejs.org/api/vm.html) for the vm executing the code.\n\n### Examples\n\n```js\n// string concatenation\nvar code = '\"app\" + \"le\"'\nvar evaluated = safeEval(code) // \"apple\"\n```\n\n```js\n// math\nvar code = 'Math.floor(22/7)'\nvar evaluated = safeEval(code) // 3.142857142857143\n```\n\n```js\n// JSON\nvar code = '{name: \"Borat\", hobbies: [\"disco dance\", \"sunbathing\"]}'\nvar evaluated = safeEval(code) // {name: \"Borat\", hobbies: [\"disco dance\", \"sunbathing\"]}\n```\n\n```js\n// function expression\nvar code = '(function square(b) { return b * b; })(5)'\nvar evaluated = safeEval(code) // 25\n```\n\n```js\n// no access to Node.js objects\nvar code = 'process'\nsafeEval(code) // THROWS!\n```\n\n```js\n// your own context API - access to Node's process object and a custom function\nvar code = '{pid: process.pid, apple: a()}'\nvar context = {\n  process: process,\n  a: function () { return 'APPLE' }\n}\nvar evaluated = safeEval(code, context) // { pid: 16987, apple: 'APPLE' }\n```\n\n```js\n// pass an options object to the vm\nvar code = 'process'\nsafeEval(code, {}, { filename: 'myfile.js'}) // myfile.js can be seen in the stacktrace\n```\n\n## License (MIT)\n\nCopyright (c) 2016 Hage Yaapa\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/hacksparrow/safe-eval.git"
  },
  "scripts": {
    "pretest": "node_modules/standard/bin/cmd.js",
    "test": "node_modules/mocha/bin/mocha test"
  },
  "version": "0.3.0"
}
